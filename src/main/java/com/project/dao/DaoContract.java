package com.project.dao;

import java.math.BigDecimal;

import com.project.services.Customer;
import com.project.services.NewUser;


/**
 * Instances of this type will access the database and
 * perform operations according to sql standards.
 * 
 * @author explosivedeer
 *
 * @param <T> The class to map to a database table
 * @param <I> The data type of the unique identifier associated with the class.
 */
	public interface DaoContract<T, I> {
	
	/**
	 * Checks all user types for access level associated.
	 * @param t
	 * @return
	 */
//	int permissions(NewUser t);
		
	/**
	 * Check to see if Username is taken.
	 * @param i Username from NewUser
	 * @return True or False depending on query results.
	 */
	boolean isTaken(String t);
	
	/**
	 * This methods will store the username and password a User enters 
	 * while on the RegisterMenu as a NewUser into the register_user table.
	 * @param t 
	 * @return
	 */
	int registerUser(NewUser t);
	
	/**
	 * This validates a NewUser's attempt to login.
	 * @param t passes Username, Passsword
	 * @return This will return the user id upon successful login
	 */
	boolean verifyLogin(NewUser t);
	
	/**
	 * This will check to see if an Account a user requests to perform
	 * actions on exists.
	 * @param c will pass Customer's account_id and id
	 * @return true or false dependent on account check.
	 */
	boolean verifyAccountID(Customer c);
	
	/**
	 * Opens an account at the Customer's Request.
	 * @param t is the Customer's ID
	 * @return This will return the Account_ID generated by the database.
	 */
	int createAccount(Integer t);
	
	
	//TODO: Condense creditAccount and debitAccount into a single method.
	/**
	 * This will handle customer deposits.
	 * @param c Pass the Customer object allowing us to access the fields. 
	 * @return this will return a BigDecimal indicating the transaction amount recorded.
	 */
	BigDecimal creditAccount(Customer c);
	
	/**
	 * This will handle customer withdraws
	 * @param c Pass the Customer object allowing us to access the fields
	 * @return This will return a BigDecimal indicating the transaction amount recorded.
	 */
	BigDecimal debitAccount(Customer c);
	
	/**
	 * This will allow the user to view their current balance
	 * @param c
	 * @return 
	 */
	BigDecimal viewBalance(Customer c);
	
	
	
	//DEPRECATED
	
	//BigDecimal transferFunds(Customer c);
}
